
<style>
.explanation{
  display: flex;
  flex-direction: column;
  padding-left: 4em;
  padding-right: 4em;
}
</style>
<div class = "explanation">
<h1 class = "sim_explanation">Explanation</h1>
<p class="sim_explanation">This is an N-body simulation where all bodies occupy
part of the 2dimensional space available in the simulation. To make numerical inputs
less intimidating, some values were scaled up and down. This simulation is still under
development. But it is meant to give you a visual intuition as to how forces add
in a setting where gravitation dominates. In this relative scale, the distance between
gridlines is 50m. This text is not final, it is only meant as a test!</p>
<p class="sim_explanation">The law of gravitation was delveloped by newton a couple hundred years ago.
  It is a law that describes attraction between masses in terms of the masses and
  their absolute distance.</p>
<p class="sim_explanation">But before showing you the math, it is better to visualize the phenomenon.
  Below you can find an image of masses whose attraction the law of gravitation
  attempts to describe</p>
<div style = "display: flex; justify-content: center;">
  <svg width="25em" height="10em">
    <rect width="100%" height="100%" fill="#444" />
    <circle cx="75%" cy="50%" r="60" fill="blue" stroke="black" />
    <circle cx="25%" cy="50%" r="60" fill="blue" stroke="black" />
   <text x="20%" y="50%" font-family="georgia">m1</text>
    <text x="70%" y="50%" font-family="georgia">m2</text>
  </svg>
</div>
<p class="sim_explanation">Observation of the solar system shows that masses like these are in fact constantly attracting one another as shown through arrows in the image below.</p>
<div style = "display: flex; justify-content: center;">
  <svg width="25em" height="10em">
    <rect width="100%" height="100%" fill="#444" />
    <circle cx="75%" cy="50%" r="60" fill="blue" stroke="black" />
    <circle cx="25%" cy="50%" r="60" fill="blue" stroke="black" />
   <text x="20%" y="40%" font-family="georgia">m1</text>
    <text x="70%" y="40%" font-family="georgia">m2</text>
   <polygon points="100,75 100,85 150,85 150,95 170,80 150,65 150,75"
            stroke="black" stroke-width="3" fill="rgb(121,0,121)"></polygon>
    <polygon points="300,75 300,85 250,85 250,95 230,80 250,65 250,75"
            stroke="black" stroke-width="3" fill="rgb(121,0,121)"></polygon>
  </svg>
</div>
<p class="sim_explanation">As shown in the picture, the forces are always directed torwards the centers of mass of the masses. This is because of the symetry of the sphere. For every atom above the middle point of each mass, there is one below pulling in the exact opposite direction. Therefore what is left for the net force is the pulling directly torwards the center of mass.</p>
<p class="sim_explanation">Another property of gravitation is that the force that one the masses involved feel is the same (of course only valid for the simple geometry of two sphere and some other specific scenarios.) But let us focus on the simple case with two masses. In this case it has been shown that doubling either mass causes the gravitational pull to double. Doubling both masses causes the attraction to become four times greater!!! Therefore it makes sense that a formula that describes the gravitational pull as a function of the masses and distance would contain a term that results from multiplying to the masses involved!
  Something in the form:
 $$m1m2k$$
</p>
<p class="sim_explanation">Furthermore, doubling the distance between the bodies causes the pull to become a fourth of what it was before, therefore it makes sense that part of this relationship comes in the form: $${1\over r^2}km1m2$$</p>
<p class="sim_explanation">Lastly, measurements show that the absolute value of the force is obtained when we take k to be 6.674 30 x 10-11 m3 kg-1 s-2. This value is usually written in textbooks using capital G, for what could mean "gravity"!!!$$|F| = |Gm1m2|\over r^2$$</p>
<p class="sim_explanation">So, now you can compute the strength of gravitational attraction, given the absolute distance between them, what happens when all you are give is a set of points and the objects' masses?</p>
<p class="sim_explanation">The "best" way to approach this is to first set up and understand the frame of reference which defines the positions of the objects. In other words, the coordinate system that allows for objective description of positions and velocities of the objects relative to an origin, which could be another object. Follows an example of what it would "look like" for masses to be in a coordinate  system.</p>
<style>
svg{
  margin: 1em;
}

svg:hover>.circles>.purpleCircle:nth-child(1){
  animation-name: circleAnimationLeft;
  animation-fill-mode: forwards;
  animation-duration: 9s;
  transform: translate(25%, 50%);
}
svg:hover>.circles>.purpleCircle:nth-child(2){
  animation-name: circleAnimationRight;
  animation-fill-mode: forwards;
  animation-duration: 9s;
  transform: translate(75%, 50%);
}
svg:hover>.rotatingCircles>.purpleCircle:nth-child(1){
  animation-name: rotatingCircleAnimationLeft;
  animation-fill-mode: forwards;
  animation-duration: 10s;
  transform: translate(25%, 50%);
}
svg:hover>.rotatingCircles>.purpleCircle:nth-child(2){
  animation-name: rotatingCircleAnimationRight;
  animation-fill-mode: forwards;
  animation-duration: 10s;
  transform: translate(75%, 50%);
}
svg:hover>.lines>.horizontalLine{
  animation-name: horizontalLineAnimation;
  animation-duration: 4s;
  animation-fill-mode: repeat;
  stroke-width: 1;
  stroke: "none";
}
svg:hover>.lines>.verticalLine{
  animation-name: verticalLineAnimation;
  animation-duration: 4s;
  animation-fill-mode: repeat;
  stroke-width: 1;
  stroke: "gray";
}

svg:hover>.arrows>.leftArrowHead, svg:hover>.arrows>.leftArrowTail{
  animation-name: leftArrowAnimation;
  animation-duration: 4s;
  animation-delay: 4s;
  animation-fill-mode: repeat;
  animation-timing-function: linear;
}

svg:hover>.arrows>.rightArrowHead, svg:hover>.arrows>.rightArrowTail{
  animation-name: rightArrowAnimation;
  animation-duration: 4s;
  animation-delay: 4s;
  animation-fill-mode: repeat;
  animation-timing-function: linear;
}

svg:hover>.rotatingArrows>.leftArrowHead, svg:hover>.rotatingArrows>.leftArrowTail{
  animation-name: rotatingLeftArrowAnimation;
  animation-duration: 10s;
  animation-delay: 0s;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
}

svg:hover>.rotatingArrows>.rightArrowHead, svg:hover>.rotatingArrows>.rightArrowTail{
  animation-name: rotatingRightArrowAnimation;
  animation-duration: 10s;
  animation-delay: 0s;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
}

svg:hover>.mathText{
  animation-name: mathTextAnimation;
  animation-duration: 3s;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  animation-delay: 5s;
}

svg:hover>.rotatingArrows>.mathText{
  animation-name: rotatingMathTextAnimation;
  animation-duration: 5s;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  animation-delay: 3s;
}

svg:hover>.staticMathText>.mathText{
  animation-name: staticMathTextAnimation;
  animation-duration: 5s;
  animation-fill-mode: forwards;
  animation-timing-function: linear;
  animation-delay: 3s;
}

.purpleCircle:nth-child(1){
  transform: translate(25%, 50%);
  fill: cornflowerblue;
  stroke: lightblue;
}
.purpleCircle:nth-child(2){
  transform: translate(75%,50%);
  fill: cornflowerblue;
  stroke: lightblue;
}
.rotatingCircles .purpleCircle{
  transform-origin: 50% 50%;
}
.lines>.horizontalLine:nth-child(1) { animation-delay: .2s }
.lines>.horizontalLine:nth-child(2) { animation-delay: .4s }
.lines>.horizontalLine:nth-child(3) { animation-delay: .6s }
.lines>.horizontalLine:nth-child(4) { animation-delay: .8s }
.lines>.horizontalLine:nth-child(5) { animation-delay: 1s }
.lines>.verticalLine:nth-child(6) { animation-delay: .1s }
.lines>.verticalLine:nth-child(7) { animation-delay: .2s }
.lines>.verticalLine:nth-child(8) { animation-delay: .3s }
.lines>.verticalLine:nth-child(9) { animation-delay: .4s }
.lines>.verticalLine:nth-child(10) { animation-delay: .5s }
.lines>.verticalLine:nth-child(11) { animation-delay: .6s }
.lines>.verticalLine:nth-child(12) { animation-delay: .7s }
.lines>.verticalLine:nth-child(13) { animation-delay: .8s }
.lines>.verticalLine:nth-child(14) { animation-delay: .9s }
.lines>.verticalLine:nth-child(15) { animation-delay: 1s }

.verticalLine, .horizontalLine, .rotatingHorizontalLine, .rotatingVerticalLine{
  stroke: gray;
}
.leftArrowHead, .rightArrowHead, .leftArrowTail, .rightArrowTail{
  fill: black;
  stroke: white;
  opacity: 0;
}

.rotatingArrows>.leftArrowHead, .rotatingArrows>.rightArrowHead,
.rotatingArrows>.leftArrowTail, .rotatingArrows>.rightArrowTail,
.rotatingArrows>.mathText{
  transform-origin: 50% 50%;
}

.mathText{
  fill: white;
  font: 15px Consolas;
  transform: translate(48.5%, 50%);
  opacity: 0;
}
.staticMathText .mathText{
  transform: none;
}

@keyframes circleAnimationLeft {
  0% {fill: cornflowerblue}
  15% {transform: translate(25%, 50%); fill: cornflowerblue}
  20% {transform: translate(25%, 50%); fill: cornflowerblue}
  30% {stroke: lightblue;fill: white;transform: translate(25%, 50%);}
  50% {stroke: lightblue ;fill: white ;transform: translate(25%, 50%) scale(.2);opacity: 1}
  90% {stroke: lightblue;fill: white ;transform: translate(25%, 50%) scale(.2); opacity: .2;}
  100% {stroke: lightblue;fill: white ;transform: translate(25%, 50%) scale(1); opacity: 0;}
}

@keyframes circleAnimationRight {
  0% {fill: cornflowerblue}
  15% {transform:translate(75%, 50%); fill: cornflowerblue}
  20% {transform:translate(75%, 50%); fill: cornflowerblue}
  30% {stroke: lightblue;fill: white; transform: translate(75%, 50%);}
  50% {stroke: lightblue;fill: white ;transform: translate(75%, 50%) scale(.2);opacity: 1}
  90% {stroke: lightblue;fill: white ;transform: translate(75%, 50%) scale(.2); opacity: 0.2;}
  100% {stroke: lightblue;fill: white ;transform: translate(75%, 50%) scale(1); opacity: 0;}
}

@keyframes rotatingCircleAnimationLeft{
  0%{transform: translate(25%, 50%)}
  10%{transform: rotate(0deg) translate(-25%, 0%) scale(.1) translate(50%, 50%); fill: white;}
  30%{transform: rotate(-45deg) translate(-25%, 0%) scale(.1) translate(50%, 50%); fill: white;}
  60%{transform: rotate(-45deg) translate(-25%, 0%) scale(.1) translate(50%, 50%); fill: white;}
  100%{transform: rotate(0deg) translate(-25%, 0%) scale(1) translate(50%, 50%); fill: cornflowerblue;}
}

@keyframes rotatingCircleAnimationRight{
  0%{transform: translate(25%, 0%) scale(1) translate(50%, 50%)}
  10%{transform: rotate(0deg) translate(25%, 0%) scale(.1) translate(50%, 50%); fill: white;}
  30%{transform: rotate(-45deg) translate(25%, 0%) scale(.1) translate(50%, 50%); fill: white;}
  60%{transform: rotate(-45deg) translate(25%, 0%) scale(.1) translate(50%, 50%); fill: white;}
  100%{transform: rotate(0deg) translate(25%, 0%) scale(1) translate(50%, 50%); fill: cornflowerblue;}
}

@keyframes horizontalLineAnimation {
  0% {transform: translateX(0%) rotateZ(180deg); stroke: rgba(255, 255, 255, 0);}
  25% {transform: translateX(100%) ; stroke: rgba(255, 255, 255, .5);}
  65% {transform: translateX(100%); stroke: rgba(255, 255, 255, 1);}
  100% {transform: translateX(0%); stroke: rgba(255, 255, 255, 1);}
}
@keyframes verticalLineAnimation {
  0% {transform: translateY(0%) rotateZ(180deg); stroke: rgba(255, 255, 255, 0);}
  25% {transform: translateY(100%); stroke: rgba(255, 255, 255, .5);}
  75% {transform: translateY(100%); stroke: rgba(255, 255, 255, 1);}
  100% {transform: translateY(0%); stroke: rgba(255, 255, 255, 1);}
}

@keyframes leftArrowAnimation {
  0% {transform: translate(47.5%, 50%) scale(-.1, 1);opacity:0;}
  25% {transform: translate(37.5%, 50%) scale(-.5, 1);opacity:1;}
  50% {transform: translate(27.5%, 50%) scale(-1, 1); opacity:1;}
  70% {transform: translate(27.5%, 50%) scale(-1, 1);opacity:1;}
  100% {transform: translate(27.5%, 50%) scale(-1, 1); opacity:0;}
}
@keyframes rightArrowAnimation {
  0% {transform: translate(52.5%, 50%) scale(.1, 1); opacity:0;}
  25% {transform: translate(62.5%, 50%) scale(.5, 1); opacity:1;}
  50% {transform: translate(72.5%, 50%) scale(1, 1); opacity:1;}
  70% {transform: translate(72.5%, 50%) scale(1, 1); opacity:1;}
  100% {transform: translate(72.5%, 50%) scale(1, 1); opacity:0;}
}

@keyframes rotatingLeftArrowAnimation {
  0% {transform: translate(-2.5%, 0%) scale(0, 1) translate(50%, 50%);opacity:0;}
  10% {transform: rotate(0deg) translate(-12.5%, 0%) scale(0, 1) translate(50%, 50%);opacity:1;}
  30% {transform: rotate(-45deg) translate(-22.5%, 0%) scale(-0, 1) translate(50%, 50%);opacity:1;}
  40% {transform: rotate(-45deg) translate(-22.5%, 0%) scale(-1, 1) translate(50%, 50%);opacity:1;}
  60% {transform: rotate(-45deg) translate(-22.5%, 0%) scale(-1, 1) translate(50%, 50%); opacity:1;}
  70% {transform: rotate(0deg) translate(-22.5%, 0%) scale(0, 1) translate(50%, 50%); opacity:0;}
  100% {transform: translate(-22.5%, 0%) scale(0, 1) translate(50%, 50%); opacity:0;}
}

@keyframes rotatingRightArrowAnimation {
  0% {transform: translate(2.5%, 0%) scale(0, 1) translate(50%, 50%);opacity:0;}
  10% {transform: rotate(0deg) translate(12.5%, 0%) scale(0, 1) translate(50%, 50%);opacity:1;}
  30% {transform: rotate(-45deg) translate(22.5%, 0%) scale(0, 1) translate(50%, 50%);opacity:1;}
  40% {transform: rotate(-45deg) translate(22.5%, 0%) scale(1, 1) translate(50%, 50%);opacity:1;}
  60% {transform: rotate(-45deg) translate(22.5%, 0%) scale(1, 1) translate(50%, 50%); opacity:1;}
  70% {transform: rotate(0deg) translate(22.5%, 0%) scale(0, 1) translate(50%, 50%); opacity:0;}
  100% {transform: translate(22.5%, 0%) scale(0, 1) translate(50%, 50%); opacity:0;}
}

@keyframes mathTextAnimation{
  0%{transform: translate(48.5%, 50%); opacity: 0}
  50%{transform: translate(48.5%, 50%); opacity: 1}
  100%{transform: translate(48.5%, 50%); opacity: 1}
}

@keyframes rotatingMathTextAnimation{
  0%{transform: translate(-1.5%, 0%) rotate(-45deg) translate(50%, 50%); opacity: 0}
  50%{transform: translate(-1.5%, 0%) rotate(-45deg) translate(50%, 50%); opacity: 1}
  100%{transform: translate(-1.5%, 0%) rotate(0deg) translate(50%, 50%); opacity: 1}
}

@keyframes staticMathTextAnimation{
  0%{}
  50%{opacity: 1;}
  100%{opacity: 1;}
}

#pythagoreanCanvas{
  background-color: black;
  broder: .1em solid gray;
  height: 200px;
  width: 400px;
}

.movableCirclesText>.mathText{
  opacity: 1;
  fill: white;
  transform: none;
  animation-name: none;
}

</style>
        <div style="display: flex; align-items:center; flex-direction: column;">
          <svg height = "200px" width="400px">
            <rect height="100%" width="100%" fill="black"/>
            <g class="lines">
              <line class="horizontalLine" x1="0%" y1="80%" x2="-150%" y2="80%"/>
              <line class="horizontalLine" x1="0%" y1="60%" x2="-150%" y2="60%"/>
              <line class="horizontalLine" x1="0%" y1="40%" x2="-150%" y2="40%"/>
              <line class="horizontalLine" x1="0%" y1="20%" x2="-150%" y2="20%"/>

              <line class="verticalLine" x1="90%" y1="0%" x2="90%" y2="-150%"/>
              <line class="verticalLine" x1="80%" y1="0%" x2="80%" y2="-150%"/>
              <line class="verticalLine" x1="70%" y1="0%" x2="70%" y2="-150%"/>
              <line class="verticalLine" x1="60%" y1="0%" x2="60%" y2="-150%"/>
              <line class="verticalLine" x1="50%" y1="0%" x2="50%" y2="-150%"/>
              <line class="verticalLine" x1="40%" y1="0%" x2="40%" y2="-150%"/>
              <line class="verticalLine" x1="30%" y1="0%" x2="30%" y2="-150%"/>
              <line class="verticalLine" x1="20%" y1="0%" x2="20%" y2="-150%"/>
              <line class="verticalLine" x1="10%" y1="0%" x2="10%" y2="-150%"/>
            </g>
            <g class="circles">
              <circle class="purpleCircle" cx="0" cy="0" r="25"/>
              <circle class="purpleCircle" cx="0" cy="0" r="25"/>
            </g>
            <g class="arrows">
              <line class='leftArrowHead' x1="0%" y1="2.5%" x2="2.5%" y2="0%"/>
              <line class='leftArrowHead' x1="0%" y1="-2.5%" x2="2.5%" y2="0%"/>
              <line class='leftArrowHead' x1="0%" y1="-2.5%" x2="0%" y2="2.5%"/>

              <line class='rightArrowHead' x1="0%" y1="2.5%" x2="2.5%" y2="0%"/>
              <line class='rightArrowHead' x1="0%" y1="-2.5%" x2="2.5%" y2="0%"/>
              <line class='rightArrowHead' x1="0%" y1="-2.5%" x2="0%" y2="2.5%"/>

              <line class="leftArrowTail" x1="0%" y1="0%" x2="-15%" y2="0%"/>
              <line class="rightArrowTail" x1="0%" y1="0%" x2="-15%" y2="0%"/>
            </g>
            <text class="mathText" x="0" y="0">r</text>
          </svg>
      </div>
    <p class="sim_explanation">In this case, all we mean when we say the objects are in a coordinate system is that they have known positions. The gridlines for instance could represent some known space in between them.</p>
    <p class="sim_explanation">How can this be helpful you may ask? The relationship between gravity depends exclusively on the masses of the objects involved and their absolute distance. Which does not depend on it's position relative to the coordinate system where it resides. Therefore receiving a coordinate system with unusual appearence does not stop you from being able to find out the forces between the objects in it. In the animation below we illustrate this by rotating the objects relative to a random point within the coordinate system. As long as the abslute distance between the objects remains the same, the gravitational pull will remain unchanged.</p>
    <div style="display: flex; align-items:center; flex-direction: column;">
      <svg height = "200px" width="400px">
        <rect height="100%" width="100%" fill="black"/>

        <g class = "rotatingLines">
          <line class="horizontalLine" x1="0%" y1="80%" x2="100%" y2="80%"/>
          <line class="horizontalLine" x1="0%" y1="60%" x2="100%" y2="60%"/>
          <line class="horizontalLine" x1="0%" y1="40%" x2="100%" y2="40%"/>
          <line class="horizontalLine" x1="0%" y1="20%" x2="100%" y2="20%"/>

          <line class="verticalLine" x1="90%" y1="-25%" x2="90%" y2="125%"/>
          <line class="verticalLine" x1="80%" y1="-25%" x2="80%" y2="125%"/>
          <line class="verticalLine" x1="70%" y1="-25%" x2="70%" y2="125%"/>
          <line class="verticalLine" x1="60%" y1="-25%" x2="60%" y2="125%"/>
          <line class="verticalLine" x1="50%" y1="-25%" x2="50%" y2="125%"/>
          <line class="verticalLine" x1="40%" y1="-25%" x2="40%" y2="125%"/>
          <line class="verticalLine" x1="30%" y1="-25%" x2="30%" y2="125%"/>
          <line class="verticalLine" x1="20%" y1="-25%" x2="20%" y2="125%"/>
          <line class="verticalLine" x1="10%" y1="-25%" x2="10%" y2="125%"/>
        </g>

        <g class="rotatingCircles">
          <circle class="purpleCircle" cx="0" cy="0" r="25" fill="purple" />
          <circle class="purpleCircle" cx="0" cy="0" r="25" fill="purple" />
        </g class="rotatingCircles">

        <g class = "rotatingArrows">
          <line class='leftArrowHead' x1="0%" y1="2.5%" x2="2.5%" y2="0%"/>
          <line class='leftArrowHead' x1="0%" y1="-2.5%" x2="2.5%" y2="0%"/>
          <line class='leftArrowHead' x1="0%" y1="-2.5%" x2="0%" y2="2.5%"/>

          <line class='rightArrowHead' x1="0%" y1="2.5%" x2="2.5%" y2="0%"/>
          <line class='rightArrowHead' x1="0%" y1="-2.5%" x2="2.5%" y2="0%"/>
          <line class='rightArrowHead' x1="0%" y1="-2.5%" x2="0%" y2="2.5%"/>

          <line class="leftArrowTail" x1="0%" y1="0%" x2="-15%" y2="0%"/>
          <line class="rightArrowTail" x1="0%" y1="0%" x2="-15%" y2="0%"/>
          <text class="mathText" x="0" y="0">r</text>
        </g>
      </svg>
    </div>
    <p class="sim_explanation">
      Now that you know that the only factor influencing the gravitational attraction between two random objects is their absolute distance and their masses, it should become clear as well that whenever a gravitational pull is calculated for two objects, the net pull on each object should point torwards the other.
      This essencially means that if you have two planets, A and B, all you the force exerted on A is in the direction of A to B, and vice versa for the force of A on B. This terminology should remind you of vectors, which are the key to numerically describing direction. Which is what we will do now.
    </p>
    <p class="sim_explanation">
      Lets start with the situation where you are given two spheres $A$ and $B$ of the same mass $m$. These masses have positions $(Ax, Ay)$ and $(Bx, By)$.
      This is what the problem would look like.
    </p>
    <div style="display: flex; align-items:center; flex-direction: column;">
      <svg height = "200px" width="400px">
        <rect height="100%" width="100%" fill="black"/>

        <g class = "rotatingLines">
          <line class="horizontalLine" x1="0%" y1="80%" x2="100%" y2="80%"/>
          <line class="horizontalLine" x1="0%" y1="60%" x2="100%" y2="60%"/>
          <line class="horizontalLine" x1="0%" y1="40%" x2="100%" y2="40%"/>
          <line class="horizontalLine" x1="0%" y1="20%" x2="100%" y2="20%"/>

          <line class="verticalLine" x1="90%" y1="-25%" x2="90%" y2="125%"/>
          <line class="verticalLine" x1="80%" y1="-25%" x2="80%" y2="125%"/>
          <line class="verticalLine" x1="70%" y1="-25%" x2="70%" y2="125%"/>
          <line class="verticalLine" x1="60%" y1="-25%" x2="60%" y2="125%"/>
          <line class="verticalLine" x1="50%" y1="-25%" x2="50%" y2="125%"/>
          <line class="verticalLine" x1="40%" y1="-25%" x2="40%" y2="125%"/>
          <line class="verticalLine" x1="30%" y1="-25%" x2="30%" y2="125%"/>
          <line class="verticalLine" x1="20%" y1="-25%" x2="20%" y2="125%"/>
          <line class="verticalLine" x1="10%" y1="-25%" x2="10%" y2="125%"/>
        </g>
        <g class="arrows">
          <line class='leftArrowHead' x1="0%" y1="2.5%" x2="2.5%" y2="0%"/>
          <line class='leftArrowHead' x1="0%" y1="-2.5%" x2="2.5%" y2="0%"/>
          <line class='leftArrowHead' x1="0%" y1="-2.5%" x2="0%" y2="2.5%"/>

          <line class='rightArrowHead' x1="0%" y1="2.5%" x2="2.5%" y2="0%"/>
          <line class='rightArrowHead' x1="0%" y1="-2.5%" x2="2.5%" y2="0%"/>
          <line class='rightArrowHead' x1="0%" y1="-2.5%" x2="0%" y2="2.5%"/>

          <line class="leftArrowTail" x1="0%" y1="0%" x2="-15%" y2="0%"/>
          <line class="rightArrowTail" x1="0%" y1="0%" x2="-15%" y2="0%"/>
        </g>
        <g class="circles">
          <circle class="purpleCircle" cx="0" cy="0" r="25" fill="purple" />
          <circle class="purpleCircle" cx="0" cy="0" r="25" fill="purple" />
        </g>
        <g class="staticMathText">
          <text class="mathText" x="10%" y="40%">(Ax, Ay)</text>
          <text class="mathText" x="60%" y="40%">(Bx, By)</text>
          <text class="mathText" x="48.5%" y="50%" style="animation-delay:5s">r</text>
        </g>
      </svg>
    </div>
    <p class="sim_explanation">
      So, if you are fresh on vectors you can skip this paragraph, else, keep your attention right here. So, to obtain the force we must first get the absolute distance between the objects. This can be done by use of the pythagorean theorem. Therefore we know: $$r=\sqrt{(Bx-Ax)^2+(By-Ay)^2}$$.
    </p>
    <p class="sim_explanation">If you do not know where this comes from, play look at the image below and do research on the pythagorean theorem:</p>
    <div style="display: flex; align-items:center; flex-direction: column;">
      <svg height = "200px" width="400px" id="pythagoreanSVG">
        <rect height="100%" width="100%" fill="black"></rect>

        <g class = "rotatingLines">
          <line class="horizontalLine" x1="0%" y1="80%" x2="100%" y2="80%"/>
          <line class="horizontalLine" x1="0%" y1="60%" x2="100%" y2="60%"/>
          <line class="horizontalLine" x1="0%" y1="40%" x2="100%" y2="40%"/>
          <line class="horizontalLine" x1="0%" y1="20%" x2="100%" y2="20%"/>

          <line class="verticalLine" x1="90%" y1="-25%" x2="90%" y2="125%"/>
          <line class="verticalLine" x1="80%" y1="-25%" x2="80%" y2="125%"/>
          <line class="verticalLine" x1="70%" y1="-25%" x2="70%" y2="125%"/>
          <line class="verticalLine" x1="60%" y1="-25%" x2="60%" y2="125%"/>
          <line class="verticalLine" x1="50%" y1="-25%" x2="50%" y2="125%"/>
          <line class="verticalLine" x1="40%" y1="-25%" x2="40%" y2="125%"/>
          <line class="verticalLine" x1="30%" y1="-25%" x2="30%" y2="125%"/>
          <line class="verticalLine" x1="20%" y1="-25%" x2="20%" y2="125%"/>
          <line class="verticalLine" x1="10%" y1="-25%" x2="10%" y2="125%"/>
        </g>

        <g class="dashedLines" stroke-dasharray="4" stroke="white">
          <line x1="50" x2="250" y1="150" y2="50"/>
          <line x1="250" x2="250" y1="50" y2="150"/>
          <line x1="50" x2="250" y1="150" y2="150"/>
        </g>

        <g class="movableCircles">
          <circle cx="50" cy="150" r="15" fill="cornflowerblue"/>
          <circle cx="250" cy="50" r="15" fill="cornflowerblue"/>
        </g>

        <g class="movableCirclesText" style="opacity:0">
          <text class="mathText" x="50" y="150">(Ax, Ay)</text>
          <text class="mathText" x="250" y="50">(Bx, By)</text>
          <text class="mathText" x="0" y="0">r=(Δx^2+Δy^2)^1/2</text>
          <text class="mathText" x="135" y="170">Δx</text>
          <text class="mathText" x="255" y="100">Δy</text>
        </g>
      </svg>
      <script type="text/javascript">
      {//Brackets to avoig conflicting scopes
        let canvas = document.getElementById("pythagoreanSVG");
        let rect = canvas.children[0];
        let lines = document.getElementsByClassName("dashedLines")[0].children;
        let circles = document.getElementsByClassName("movableCircles")[0].children;
        let texts = document.getElementsByClassName("movableCirclesText")[0].children;
        let b1Text = texts[0];
        let b2Text = texts[1];
        let line_Text = texts[2];
        let textΔx = texts[3];
        let textΔy = texts[4];
        let line_ = lines[0];
        let linex = lines[1];
        let liney = lines[2];
        let b1 = circles[0];
        let b2 = circles[1];
        b1.style.cursor = b2.style.cursor= "grab";
        b1.style.transition = b2.style.transition= "cursor .2s";
        let selectedBall = false;
        function moveBall(event){
          if (!selectedBall){return null;};
          b1.style.cursor = b2.style.cursor= "grabbing";

          selectedBall.setAttribute("cx", event.offsetX);
          selectedBall.setAttribute("cy", event.offsetY);

          let b1x = b1.cx.animVal.value;
          let b1y = b1.cy.animVal.value;
          let b2x = b2.cx.animVal.value;
          let b2y = b2.cy.animVal.value;

          line_.setAttribute("x1", b1x);
          line_.setAttribute("x2", b2x);
          line_.setAttribute("y1", b1y);
          line_.setAttribute("y2", b2y);

          linex.setAttribute("x1", b1x);
          linex.setAttribute("x2", b2x);
          linex.setAttribute("y1", b1y);
          linex.setAttribute("y2", b1y);

          liney.setAttribute("x1", b2x);
          liney.setAttribute("x2", b2x);
          liney.setAttribute("y1", b1y);
          liney.setAttribute("y2", b2y);

          b1Text.setAttribute("x", b1x+10);
          b1Text.setAttribute("y", b1y+20);
          b2Text.setAttribute("x", b2x+10);
          b2Text.setAttribute("y", b2y+20);

          let r_ = Math.sqrt((b2x-b1x)**2+(b2y-b1y)**2);
          let cosine = (b2x-b1x)/r_;
          let sine = (b2y-b1y)/r_;
          line_Text.setAttribute("x", 0);
          line_Text.setAttribute("y", 0);
          line_Text.style.transform = `translate(-${cosine*50}px, ${sine*50}px) matrix(${cosine}, ${sine}, ${-sine}, ${cosine}, ${(b1x+b2x)/2}, ${(b1y+b2y)/2})`;

          textΔx.setAttribute("x", (b1x+b2x)/2);
          textΔx.setAttribute("y", b1y+15);
          textΔy.setAttribute("x", b2x+15);
          textΔy.setAttribute("y", (b1y+b2y)/2);
        };
        function checkIntersection(event){
          let x = event.offsetX;
          let y = event.offsetY;
          let b1x = b1.cx.animVal.value;
          let b1y = b1.cy.animVal.value;
          let b2x = b2.cx.animVal.value;
          let b2y = b2.cy.animVal.value;
          let b1r = b1.r.animVal.value;
          let b2r = b2.r.animVal.value;
          let sqrt = Math.sqrt
          if (sqrt((b1x-x)**2+(b1y-y)**2)<=b1r){
            selectedBall = b1;
          } else  if (sqrt((b2x-x)**2+(b2y-y)**2)<=b2r){
            selectedBall = b2;
          } else {
            selectedBall = false;
            b1.style.stroke = b2.style.stroke = "lightblue";
            return null;
          };
          b1.style.stroke = b2.style.stroke = "lightblue";
          selectedBall.style.stroke = "white";
          let element = document.getElementsByClassName("movableCirclesText")[0];
          console.log(element.style.opacity);
          if (element.style.opacity == "0"){
            element.style.transition = "opacity 2s";
            element.style.opacity = "1";
          };
        };
        function endMovement(){
          selectedBall = false;
          let element = document.getElementsByClassName("movableCirclesText")[0];
          console.log(element.style.opacity);
          if (element.style.opacity == "1"){
            element.style.transition = "opacity 2s";
            element.style.opacity = "0";
          };
          b1.style.cursor = b2.style.cursor= "grab";
        };

        canvas.addEventListener("mousemove", moveBall);
        canvas.addEventListener("mousedown", checkIntersection);
        canvas.addEventListener("mouseup", endMovement)
      };
      </script>
    </div>

</div>
