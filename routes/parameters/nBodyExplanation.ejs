
  <style>
    body {
		margin:0;
	}
	.myUl {
		display: flex;
		justify-content: space-between;
		margin: 0;
		align-items: baseline;
		background-color: rgb(20, 40, 120);
		list-style: none;
		font-size: 24px;
		font-family: Consolas;
		text-decoration: none;
		color: white;
		padding: 0.4em 0.7em;
	}
	.myUl li:hover {
		transform: scale(1.1);
		transition-duration: 0.1s;
	}
	.spacedli{
		float: right;
		font-size: 20px;
	}
	.spacedli li{
		display: inline-block;
		padding: 0.4em 0.7em;
	}

	.simBoxOut{
		display: flex;
		background-color: orange;
		position: relative;
		margin: auto;
		height:100%;
		width: 100%;
		justify-content: center;
		text-align: center;
	}

.simtitle{
	font-family:Consolas;
	color: black;
	text-align: center;
}
.explanation{
  display: flex;
  flex-direction: column;
  padding-left: 4em;
  padding-right: 4em;
}

#explanationCanvas0{
  height: 200px;
  width: 400px;
  border: .1em solid gray;
  border-radius: .3em;
}
</style>
<div class = "explanation">
<h1 class = "sim_explanation">Explanation</h1>
<p class="sim_explanation">This is an N-body simulation where all bodies occupy
part of the 2dimensional space available in the simulation. To make numerical inputs
less intimidating, some values were scaled up and down. This simulation is still under
development. But it is meant to give you a visual intuition as to how forces add
in a setting where gravitation dominates. In this relative scale, the distance between
gridlines is 50m. This text is not final, it is only meant as a test!</p>
<p class="sim_explanation">The law of gravitation was delveloped by newton a couple hundred years ago.
  It is a law that describes attraction between masses in terms of the masses and
  their absolute distance.</p>
<p class="sim_explanation">But before showing you the math, it is better to visualize the phenomenon.
  Below you can find an image of masses whose attraction the law of gravitation
  attempts to describe</p>
<div style = "display: flex; justify-content: center;">
  <svg width="25em" height="10em">
    <rect width="100%" height="100%" fill="#444" />
    <circle cx="75%" cy="50%" r="60" fill="blue" stroke="black" />
    <circle cx="25%" cy="50%" r="60" fill="blue" stroke="black" />
   <text x="20%" y="50%" font-family="georgia">m1</text>
    <text x="70%" y="50%" font-family="georgia">m2</text>
  </svg>
</div>
<p class="sim_explanation">Observation of the solar system shows that masses like these are in fact constantly attracting one another as shown through arrows in the image below.</p>
<div style = "display: flex; justify-content: center;">
  <svg width="25em" height="10em">
    <rect width="100%" height="100%" fill="#444" />
    <circle cx="75%" cy="50%" r="60" fill="blue" stroke="black" />
    <circle cx="25%" cy="50%" r="60" fill="blue" stroke="black" />
   <text x="20%" y="40%" font-family="georgia">m1</text>
    <text x="70%" y="40%" font-family="georgia">m2</text>
   <polygon points="100,75 100,85 150,85 150,95 170,80 150,65 150,75"
            stroke="black" stroke-width="3" fill="rgb(121,0,121)"></polygon>
    <polygon points="300,75 300,85 250,85 250,95 230,80 250,65 250,75"
            stroke="black" stroke-width="3" fill="rgb(121,0,121)"></polygon>
  </svg>
</div>
<p class="sim_explanation">As shown in the picture, the forces are always directed torwards the centers of mass of the masses. This is because of the symetry of the sphere. For every atom above the middle point of each mass, there is one below pulling in the exact opposite direction. Therefore what is left for the net force is the pulling directly torwards the center of mass.</p>
<p class="sim_explanation">Another property of gravitation is that the force that one the masses involved feel is the same (of course only valid for the simple geometry of two sphere and some other specific scenarios.) But let us focus on the simple case with two masses. In this case it has been shown that doubling either mass causes the gravitational pull to double. Doubling both masses causes the attraction to become four times greater!!! Therefore it makes sense that a formula that describes the gravitational pull as a function of the masses and distance would contain a term that results from multiplying to the masses involved!
  Something in the form:
 $$m1m2k$$
</p>
<p class="sim_explanation">Furthermore, doubling the distance between the bodies causes the pull to become a fourth of what it was before, therefore it makes sense that part of this relationship comes in the form: $${1\over r^2}km1m2$$</p>
<p class="sim_explanation">Lastly, measurements show that the absolute value of the force is obtained when we take k to be 6.674 30 x 10-11 m3 kg-1 s-2. This value is usually written in textbooks using capital G, for what could mean "gravity"!!!$$|F| = |Gm1m2|\over r^2$$</p>
<p class="sim_explanation">So, now you can compute the strength of gravitational attraction, what about direction?</p>
        <p>The "best" way to approach this is to first set up a frame of reference. In other words, to create a coordinate system that allows for objective description of positions and velocities of the objects relative to an origin. Follows an example of a coordinate system where our masses could be located.</p>
        <div style="display: flex; align-items:center; flex-direction: column;">

            <!-- <link rel="stylesheet" href="style.css"> -->
            <style>
            .purpleCircle:nth-child(2){
              transform: translate(25%, 50%);
              fill: cornflowerblue;
            }
            .purpleCircle:nth-child(3){
              transform: translate(75%, 50%);
              fill: cornflowerblue;
            }
            svg:hover>.purpleCircle:nth-child(2){
              animation-name: circleAnimationLeft;
              animation-fill-mode: forwards;
              animation-duration: 9s;
              transform: translate(25%, 50%);
            }
            svg:hover>.purpleCircle:nth-child(3){
              animation-name: circleAnimationRight;
              animation-fill-mode: forwards;
              animation-duration: 9s;
              transform: translate(75%, 50%);
            }
            svg:hover>.horizontalLine{
              animation-name: horizontalLineAnimation;
              animation-duration: 4s;
              animation-fill-mode: repeat;
              stroke-width: 1;
              stroke: "none";
            }
            svg:hover>.verticalLine{
              animation-name: verticalLineAnimation;
              animation-duration: 4s;
              animation-fill-mode: repeat;
              stroke-width: 1;
              stroke: "white";
            }

            svg:hover>.leftArrowHead, svg:hover>.leftArrowTail{
              animation-name: leftArrowAnimation;
              animation-duration: 4s;
              animation-delay: 4s;
              animation-fill-mode: repeat;
              animation-timing-function: linear;
            }

            svg:hover>.rightArrowHead, svg:hover>.rightArrowTail{
              animation-name: rightArrowAnimation;
              animation-duration: 4s;
              animation-delay: 4s;
              animation-fill-mode: repeat;
              animation-timing-function: linear;
            }
            svg:hover>.mathText{
              animation-name: mathTextAnimation;
              animation-duration: 3s;
              animation-fill-mode: forwards;
              animation-timing-function: linear;
              animation-delay: 5s;
            }

            .horizontalLine:nth-child(3) { animation-delay: .2s }
            .horizontalLine:nth-child(4) { animation-delay: .4s }
            .horizontalLine:nth-child(5) { animation-delay: .6s }
            .horizontalLine:nth-child(6) { animation-delay: .8s }
            .horizontalLine:nth-child(7) { animation-delay: 1s }
            .verticalLine:nth-child(8) { animation-delay: .1s }
            .verticalLine:nth-child(9) { animation-delay: .2s }
            .verticalLine:nth-child(10) { animation-delay: .3s }
            .verticalLine:nth-child(11) { animation-delay: .4s }
            .verticalLine:nth-child(12) { animation-delay: .5s }
            .verticalLine:nth-child(13) { animation-delay: .6s }
            .verticalLine:nth-child(14) { animation-delay: .7s }
            .verticalLine:nth-child(15) { animation-delay: .8s }
            .verticalLine:nth-child(16) { animation-delay: .9s }
            .verticalLine:nth-child(17) { animation-delay: 1s }

            .verticalLine, .horizontalLine{
              stroke: white;
            }
            .leftArrowHead, .rightArrowHead{
              fill: black;
            }
            .leftArrowHead, .leftArrowTail{
              transform: translate(45%, 50%) scale(-.1, 1);
            }
            .rightArrowHead, .rightArrowTail{
              transform: translate(55%, 50%) scale(.1, 1);
            }
            .mathText{
              fill: white;
              font: 15px Consolas;
              transform: translate(48.5%, 50%);
              opacity: 0;
            }

            @keyframes circleAnimationLeft {
              0% {fill: cornflowerblue}
              15% {transform: translate(25%, 50%); fill: cornflowerblue}
              20% {transform: translate(25%, 50%); fill: cornflowerblue}
              30% {stroke: black;fill: white;transform: translate(25%, 50%)}
              50% {stroke: black ;fill: white ;transform: translate(25%, 50%) scale(.2);opacity: 1}
              90% {stroke: black;fill: white ;transform: translate(25%, 50%) scale(.2); opacity: 0;}
              100% {stroke: black;fill: white ;transform: translate(25%, 50%) scale(1); opacity: 0;}
            }
            @keyframes circleAnimationRight {
              0% {fill: cornflowerblue}
              15% {transform:translate(75%, 50%); fill: cornflowerblue}
              20% {transform:translate(75%, 50%); fill: cornflowerblue}
              30% {stroke: black;fill: white; transform: translate(75%, 50%);}
              50% {stroke: black;fill: white ;transform: translate(75%, 50%) scale(.2);opacity: 1}
              90% {stroke: black;fill: white ;transform: translate(75%, 50%) scale(.2); opacity: 0;}
              100% {stroke: black;fill: white ;transform: translate(75%, 50%) scale(1); opacity: 0;}
            }
            @keyframes horizontalLineAnimation {
              0% {transform: translateX(0%); stroke: rgba(255, 255, 255, 0);}
              25% {transform: translateX(100%); stroke: rgba(255, 255, 255, .5);}
              65% {transform: translateX(100%); stroke: rgba(255, 255, 255, 1);}
              100% {transform: translateX(0%); stroke: rgba(255, 255, 255, 1);}
            }
            @keyframes verticalLineAnimation {
              0% {transform: translateY(0%); stroke: rgba(255, 255, 255, 0);}
              25% {transform: translateY(100%); stroke: rgba(255, 255, 255, .5);}
              75% {transform: translateY(100%); stroke: rgba(255, 255, 255, 1);}
              100% {transform: translateY(0%); stroke: rgba(255, 255, 255, 1);}
            }

            @keyframes leftArrowAnimation {
              0% {transform: translate(47.5%, 50%) scale(-.1, 1);stroke: white; opacity:0;}
              25% {transform: translate(37.5%, 50%) scale(-.5, 1);stroke: white; opacity:1;}
              50% {transform: translate(27.5%, 50%) scale(-1, 1);stroke: white; opacity:1;}
              70% {transform: translate(27.5%, 50%) scale(-1, 1);stroke: white; opacity:0;}
              100% {transform: translate(27.5%, 50%) scale(-1, 1);stroke: white; opacity:0;}
            }
            @keyframes rightArrowAnimation {
              0% {transform: translate(52.5%, 50%) scale(.1, 1); stroke: white; opacity:0;}
              25% {transform: translate(62.5%, 50%) scale(.5, 1); stroke: white; opacity:1;}
              50% {transform: translate(72.5%, 50%) scale(1, 1); stroke: white; opacity:1;}
              70% {transform: translate(72.5%, 50%) scale(1, 1); stroke: white; opacity:0;}
              100% {transform: translate(72.5%, 50%) scale(1, 1); stroke: white; opacity:0;}
            }
            @keyframes mathTextAnimation{
              0%{transform: translate(48.5%, 50%); opacity: 0}
              50%{transform: translate(48.5%, 50%); opacity: 1}
              100%{transform: translate(48.5%, 50%); opacity: 1}
            }
            </style>
            <svg height = "200px" width="400px">
              <rect height="100%" width="100%" fill="black"/>
              <circle class="purpleCircle" cx="0" cy="0" r="25" fill="purple" />
              <circle class="purpleCircle" cx="0" cy="0" r="25" fill="purple" />
              <line class="horizontalLine" x1="0%" y1="80%" x2="-100%" y2="80%"/>
              <line class="horizontalLine" x1="0%" y1="60%" x2="-100%" y2="60%"/>
              <line class="horizontalLine" x1="0%" y1="40%" x2="-100%" y2="40%"/>
              <line class="horizontalLine" x1="0%" y1="20%" x2="-100%" y2="20%"/>

              <line class="verticalLine" x1="90%" y1="0%" x2="90%" y2="-100%"/>
              <line class="verticalLine" x1="80%" y1="0%" x2="80%" y2="-100%"/>
              <line class="verticalLine" x1="70%" y1="0%" x2="70%" y2="-100%"/>
              <line class="verticalLine" x1="60%" y1="0%" x2="60%" y2="-100%"/>
              <line class="verticalLine" x1="50%" y1="0%" x2="50%" y2="-100%"/>
              <line class="verticalLine" x1="40%" y1="0%" x2="40%" y2="-100%"/>
              <line class="verticalLine" x1="30%" y1="0%" x2="30%" y2="-100%"/>
              <line class="verticalLine" x1="20%" y1="0%" x2="20%" y2="-100%"/>
              <line class="verticalLine" x1="10%" y1="0%" x2="10%" y2="-100%"/>

              <line class='leftArrowHead' x1="0%" y1="2.5%" x2="2.5%" y2="0%"/>
              <line class='leftArrowHead' x1="0%" y1="-2.5%" x2="2.5%" y2="0%"/>
              <line class='leftArrowHead' x1="0%" y1="-2.5%" x2="0%" y2="2.5%"/>

              <line class='rightArrowHead' x1="0%" y1="2.5%" x2="2.5%" y2="0%"/>
              <line class='rightArrowHead' x1="0%" y1="-2.5%" x2="2.5%" y2="0%"/>
              <line class='rightArrowHead' x1="0%" y1="-2.5%" x2="0%" y2="2.5%"/>

              <line class="leftArrowTail" x1="0%" y1="0%" x2="-15%" y2="0%"/>
              <line class="rightArrowTail" x1="0%" y1="0%" x2="-15%" y2="0%"/>

              <text class="mathText" x="0" y="0">r</text>
            </svg>
      </div>
</div>
